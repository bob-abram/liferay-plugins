<?xml version="1.0"?>
<!DOCTYPE project>

<project name="build-common" xmlns:antelope="antlib:ise.antelope.tasks">
	<dirname file="${ant.file.build-common}" property="sdk.dir" />

	<property environment="env" />

	<path id="lib.classpath">
		<fileset dir="${sdk.dir}/lib" includes="*.jar" />
	</path>

	<taskdef classpathref="lib.classpath" resource="net/sf/antcontrib/antlib.xml" />
	<taskdef classpathref="lib.classpath" resource="ise/antelope/tasks/antlib.xml" uri="antlib:ise.antelope.tasks" />

	<property file="${sdk.dir}/build.${user.name}.properties" />
	<property file="${sdk.dir}/build.${env.COMPUTERNAME}.properties" />
	<property file="${sdk.dir}/build.${env.HOST}.properties" />
	<property file="${sdk.dir}/build.${env.HOSTNAME}.properties" />

	<if>
		<isset property="app.server.dir" />
		<then>
			<if>
				<isset property="app.server.type" />
				<then>
					<propertycopy from="app.server.dir" name="app.server.${app.server.type}.dir" />
				</then>
				<else>
					<propertycopy from="app.server.dir" name="app.server.tomcat.dir" />
				</else>
			</if>
		</then>
	</if>

	<property file="${sdk.dir}/build.properties" />

	<propertycopy from="app.server.${app.server.type}.dir" name="app.server.dir" />
	<propertycopy from="app.server.${app.server.type}.deploy.dir" name="app.server.deploy.dir" />
	<propertycopy from="app.server.${app.server.type}.lib.global.dir" name="app.server.lib.global.dir" />
	<propertycopy from="app.server.${app.server.type}.portal.dir" name="app.server.portal.dir" />
	<propertycopy from="app.server.${app.server.type}.zip.name" name="app.server.zip.name" silent="true" />

	<property name="app.server.classes.portal.dir" value="${app.server.portal.dir}/WEB-INF/classes" />
	<property location="${app.server.portal.dir}/WEB-INF/lib" name="app.server.lib.portal.dir" />

	<import file="build-common-ivy.xml" />

	<path id="plugin.classpath">
		<path refid="plugin-lib.classpath" />
		<fileset dir="${app.server.lib.global.dir}" includes="*.jar" />
		<fileset dir="${app.server.lib.portal.dir}" includes="annotations.jar,commons-logging.jar,log4j.jar,util-bridges.jar,util-java.jar,util-taglib.jar" />
		<fileset dir="${sdk.dir}/lib" includes="activation.jar,javax.servlet-api.jar,jsp-api.jar,mail.jar" />
	</path>

	<path id="portal.classpath">
		<pathelement location="${app.server.classes.portal.dir}" />
		<fileset dir="${app.server.lib.global.dir}" includes="*.jar" />
		<fileset dir="${app.server.lib.portal.dir}" includes="*.jar" />
		<fileset dir="${sdk.dir}/lib" includes="activation.jar,jargs.jar,javax.servlet-api.jar,jsp-api.jar,qdox.jar" />
	</path>

	<path id="test.classpath">
		<path refid="plugin.classpath" />
		<fileset dir="${app.server.lib.portal.dir}" excludes="ant.jar" includes="*.jar" />
		<fileset dir="${sdk.dir}/lib" includes="junit.jar,mockito-all.jar,powermock-*.jar,spring-test.jar" />
		<pathelement location="test-classes/integration" />
		<pathelement location="test-classes/unit" />
	</path>

	<condition property="correct.ant.version">
		<antversion atleast="1.8.0" />
	</condition>

	<if>
		<not>
			<equals arg1="${correct.ant.version}" arg2="true" />
		</not>
		<then>
			<fail>Please use Ant 1.8.0 or above.</fail>
		</then>
	</if>

	<whichresource resource="/org/eclipse/jdt/core/JDTCompilerAdapter.class" property="ecj.compiler" />
	<whichresource resource="/com/google/errorprone/ErrorProneAntCompilerAdapter.class" property="google.errorprone.compiler" />

	<if>
		<and>
			<equals arg1="${javac.compiler}" arg2="org.eclipse.jdt.core.JDTCompilerAdapter" />
			<not>
				<isset property="ecj.compiler" />
			</not>
		</and>
		<then>
			<copy file="${sdk.dir}/lib/ecj.jar" todir="${ant.home}/lib" />

			<fail>
.

Task cannot continue because ECJ is not installed.

ECJ was automatically installed. Please rerun your task.
			</fail>
		</then>
		<else>
			<if>
				<and>
					<equals arg1="${javac.compiler}" arg2="com.google.errorprone.ErrorProneAntCompilerAdapter" />
					<not>
						<isset property="google.errorprone.compiler" />
					</not>
				</and>
				<then>
					<copy file="${sdk.dir}/lib/error_prone_ant.jar" todir="${ant.home}/lib" />

					<fail>
.

Task cannot continue because Error-Prone is not installed.

Error-Prone was automatically installed. Please rerun your task.
					</fail>
				</then>
			</if>
		</else>
	</if>

	<macrodef name="call-macrodef-or-target">
		<attribute name="macrodef.name" />
		<attribute name="module.dir" />

		<sequential>
			<loadfile property="call-macrodef-or-target.build.xml.content" srcFile="@{module.dir}/build.xml" />

			<if>
				<contains string="${call-macrodef-or-target.build.xml.content}" substring="&lt;target name=&quot;@{macrodef.name}&quot;&gt;" />
				<then>
					<ant dir="@{module.dir}" target="@{macrodef.name}" inheritAll="false" />
				</then>
				<else>
					<if>
						<equals arg1="@{macrodef.name}" arg2="clean" />
						<then>
							<clean
								module.dir="@{module.dir}"
							/>
						</then>
						<elseif>
							<equals arg1="@{macrodef.name}" arg2="clean-portal-dependencies" />
							<then>
								<clean-portal-dependencies
									module.dir="@{module.dir}"
								/>
							</then>
						</elseif>
						<elseif>
							<equals arg1="@{macrodef.name}" arg2="compile-import-shared" />
							<then>
								<compile-import-shared
									module.dir="@{module.dir}"
								/>
							</then>
						</elseif>
						<elseif>
							<equals arg1="@{macrodef.name}" arg2="merge" />
							<then>
								<merge
									module.dir="@{module.dir}"
								/>
							</then>
						</elseif>
						<elseif>
							<equals arg1="@{macrodef.name}" arg2="merge-unzip" />
							<then>
								<merge-unzip
									module.dir="@{module.dir}"
								/>
							</then>
						</elseif>
					</if>
				</else>
			</if>

			<var name="call-macrodef-or-target.build.xml.content" unset="true" />
		</sequential>
	</macrodef>

	<macrodef name="clean">
		<attribute name="module.dir" />

		<sequential>
			<set-module-properties
				module.dir="@{module.dir}"
			/>

			<delete dir="@{module.dir}/classes" />
			<delete dir="@{module.dir}/docroot/WEB-INF/classes" />

			<if>
				<available file="@{module.dir}/docroot/WEB-INF/.gitignore" />
				<then>
					<loadfile property=".gitignore.content" srcFile="@{module.dir}/docroot/WEB-INF/.gitignore" />

					<if>
						<contains string="${.gitignore.content}" substring="/lib" />
						<then>
							<delete dir="@{module.dir}/docroot/WEB-INF/lib" />
						</then>
					</if>

					<var name=".gitignore.content" unset="true" />
				</then>
			</if>

			<if>
				<and>
					<available file="@{module.dir}/docroot/WEB-INF/.svn" />
					<not>
						<available file="@{module.dir}/docroot/WEB-INF/lib/.svn" />
					</not>
					<length length="0" when="equal">
						<fileset dir="@{module.dir}/docroot/WEB-INF/lib" erroronmissingdir="false" />
					</length>
				</and>
				<then>
					<delete dir="@{module.dir}/docroot/WEB-INF/lib" />
				</then>
			</if>

			<delete dir="@{module.dir}/javadoc" />
			<delete dir="@{module.dir}/test-classes" />
			<delete dir="@{module.dir}/test-results" />
			<delete dir="@{module.dir}/tmp" />

			<delete failonerror="false" includeemptydirs="true">
				<fileset dir="@{module.dir}/docroot" includes="**/*.processed" />
				<fileset dir="@{module.dir}/docroot" includes="**/.sass-cache/**" />
				<fileset dir="@{module.dir}/docroot" includes="**/.sprite.png" />
				<fileset dir="@{module.dir}/docroot" includes="**/.sprite.properties" />
				<fileset dir="@{module.dir}/docroot" includes="**/Thumbs.db" />
			</delete>

			<delete file="${plugin.file}" />
			<delete file="${plugin.javadoc.file}" />
			<delete file="${plugin.pom.file}" />
			<delete file="${plugin.sources.file}" />
			<delete file="${plugin.src.file}" />

			<call-macrodef-or-target
				macrodef.name="clean-portal-dependencies"
				module.dir="@{module.dir}"
			/>

			<if>
				<matches pattern=".*-theme" string="@{module.dir}" />
				<then>
					<if>
						<available file="@{module.dir}/docroot/_diffs" />
						<then>
							<delete includeemptydirs="true" quiet="true" failonerror="false">
								<fileset
									dir="@{module.dir}/docroot"
									excludes=".gitignore,_diffs.*,_diffs/**,WEB-INF/**"
								/>
							</delete>
						</then>
					</if>
				</then>
			</if>
		</sequential>
	</macrodef>

	<macrodef name="clean-portal-dependencies">
		<attribute name="module.dir" />

		<sequential>
			<set-module-properties
				module.dir="@{module.dir}"
			/>

			<if>
				<equals arg1="${plugins.war.clean.portal.dependencies}" arg2="true" />
				<then>
					<if>
						<available file="@{module.dir}/docroot/WEB-INF/lib" />
						<then>
							<delete>
								<fileset dir="@{module.dir}/docroot/WEB-INF/lib" includes="${required.portal.jars}" />
								<fileset dir="@{module.dir}/docroot/WEB-INF/lib" includes="${plugin.jars}" />
							</delete>
						</then>
					</if>

					<if>
						<available file="@{module.dir}/docroot/WEB-INF/tld" />
						<then>
							<delete>
								<fileset dir="@{module.dir}/docroot/WEB-INF/tld" includes="${plugin.tlds}" />
							</delete>
						</then>
					</if>

					<if>
						<available file="@{module.dir}/tmp/WEB-INF/lib" />
						<then>
							<delete>
								<fileset dir="@{module.dir}/tmp/WEB-INF/lib" includes="${required.portal.jars}" />
								<fileset dir="@{module.dir}/tmp/WEB-INF/lib" includes="${plugin.jars}" />
							</delete>
						</then>
					</if>

					<if>
						<available file="@{module.dir}/tmp/WEB-INF/tld" />
						<then>
							<delete>
								<fileset dir="@{module.dir}/tmp/WEB-INF/tld" includes="${plugin.tlds}" />
							</delete>
						</then>
					</if>
				</then>
			</if>
		</sequential>
	</macrodef>

	<macrodef name="compile-import-shared">
		<attribute name="module.dir" />

		<sequential>
			<set-module-properties
				module.dir="@{module.dir}"
			/>

			<loadfile property="compile-import-shared.build.xml.content" srcFile="@{module.dir}/build.xml" />

			<script classpathref="lib.classpath" language="beanshell">
				String buildXmlContent = project.getProperty("compile-import-shared.build.xml.content");

				int x = buildXmlContent.indexOf("property name=\"import.compat.shared\" value=\"");

				if (x != -1) {
					x = buildXmlContent.indexOf("value=\"", x) + 7;

					int y = buildXmlContent.indexOf("\"", x);

					project.setProperty("compile-import-shared.import.compat.shared", buildXmlContent.substring(x, y));
				}

				x = buildXmlContent.indexOf("property name=\"import.shared\" value=\"");

				if (x != -1) {
					x = buildXmlContent.indexOf("value=\"", x) + 7;

					int y = buildXmlContent.indexOf("\"", x);

					project.setProperty("compile-import-shared.import.shared", buildXmlContent.substring(x, y));
				}
			</script>

			<if>
				<not>
					<equals arg1="${plugin.name}" arg2="portal-compat-shared" />
				</not>
				<then>
					<if>
						<or>
							<not>
								<isset property="import.compat.shared" />
							</not>
							<equals arg1="${import.compat.shared}" arg2="true" />
						</or>
						<then>
							<if>
								<isset property="import.shared" />
								<then>
									<var name="import.shared" value="portal-compat-shared,${import.shared}" />
								</then>
								<else>
									<var name="import.shared" value="portal-compat-shared" />
								</else>
							</if>
						</then>
					</if>
				</then>
			</if>

			<if>
				<isset property="import.shared" />
				<then>
					<var name="import.shared.list" value="${import.shared}" />

					<var name="import.shared" unset="true" />

					<for list="${import.shared.list}" param="import.shared.current">
						<sequential>
							<if>
								<available file="${sdk.dir}/shared/@{import.shared.current}/src" />
								<then>
									<ant dir="${sdk.dir}/shared/@{import.shared.current}" target="jar" inheritAll="false" />

									<for param="import.shared.full.path">
										<path>
											<fileset dir="${sdk.dir}/dist" includes="@{import.shared.current}-${lp.version}.*.jar" />
										</path>
										<sequential>
											<copy
												file="@{import.shared.full.path}"
												tofile="${plugin.lib.dir}/@{import.shared.current}.jar"
											/>
										</sequential>
									</for>

									<if>
										<available file="${sdk.dir}/shared/@{import.shared.current}/lib" />
										<then>
											<copy todir="${plugin.lib.dir}">
												<fileset dir="${sdk.dir}/shared/@{import.shared.current}/lib" includes="*.jar" />
											</copy>
										</then>
									</if>
								</then>
							</if>
						</sequential>
					</for>
				</then>
			</if>

			<var name="compile-import-shared.build.xml.content" unset="true" />
			<var name="compile-import-shared.import.compat.shared" unset="true" />
			<var name="compile-import-shared.import.shared" unset="true" />
		</sequential>
	</macrodef>

	<macrodef name="loop-modules">
		<attribute name="loop.modules.cmd" />
		<attribute name="loop.modules.dir" />

		<sequential>
			<if>
				<not>
					<equals arg1="${plugins.includes}" arg2="" />
				</not>
				<then>
					<path id="module.dirs.path">
						<dirset dir="@{loop.modules.dir}" excludes="${plugins.excludes}" includes="${plugins.includes}" />
					</path>

					<pathconvert pathsep="," property="module.dirs" refid="module.dirs.path" targetos="unix" />

					<for list="${module.dirs}" param="module.dir">
						<sequential>
							<call-macrodef-or-target
								macrodef.name="@{loop.modules.cmd}"
								module.dir="@{module.dir}"
							/>
						</sequential>
					</for>

					<var name="module.dirs" unset="true" />
				</then>
			</if>
		</sequential>
	</macrodef>

	<macrodef name="merge">
		<attribute name="module.dir" />

		<sequential>
			<loadfile property="merge.build.xml.content" srcFile="@{module.dir}/build.xml" />

			<script classpathref="lib.classpath" language="beanshell">
				String buildXmlContent = project.getProperty("merge.build.xml.content");

				int x = buildXmlContent.indexOf("property name=\"original.war.file\" value=\"");

				if (x != -1) {
					x = buildXmlContent.indexOf("value=\"", x) + 7;

					int y = buildXmlContent.indexOf("\"", x);

					project.setProperty("merge.original.war.file", buildXmlContent.substring(x, y));
				}
			</script>

			<if>
				<isset property="merge.original.war.file" />
				<then>
					<if>
						<not>
							<uptodate srcfile="@{module.dir}/${merge.original.war.file}" targetfile="@{module.dir}/tmp" />
						</not>
						<then>
							<delete dir="@{module.dir}/tmp" />
							<mkdir dir="@{module.dir}/tmp" />

							<mkdir dir="@{module.dir}/tmp/WEB-INF/classes" />
							<mkdir dir="@{module.dir}/tmp/WEB-INF/lib" />

							<call-macrodef-or-target
								macrodef.name="merge-unzip"
								module.dir="@{module.dir}"
							/>

							<var name="merge.build.xml.content" unset="true" />

							<copy todir="@{module.dir}/tmp" overwrite="true">
								<fileset dir="@{module.dir}/docroot" />
							</copy>
						</then>
					</if>

					<copy todir="@{module.dir}/tmp">
						<fileset dir="@{module.dir}/docroot" />
					</copy>
				</then>
			</if>

			<var name="merge.build.xml.content" unset="true" />
			<var name="merge.original.war.file" unset="true" />
		</sequential>
	</macrodef>

	<macrodef name="merge-unzip">
		<attribute name="module.dir" />

		<sequential>
			<loadfile property="merge-unzip.build.xml.content" srcFile="@{module.dir}/build.xml" />

			<script classpathref="lib.classpath" language="beanshell">
				String buildXmlContent = project.getProperty("merge-unzip.build.xml.content");

				int x = buildXmlContent.indexOf("property name=\"original.war.file\" value=\"");

				x = buildXmlContent.indexOf("value=\"", x) + 7;

				int y = buildXmlContent.indexOf("\"", x);

				project.setProperty("merge-unzip.original.war.file", buildXmlContent.substring(x, y));
			</script>

			<unzip
				dest="@{module.dir}/tmp"
				src="@{module.dir}/${merge-unzip.original.war.file}"
			/>

			<var name="merge-unzip.build.xml.content" unset="true" />
			<var name="merge-unzip.original.war.file" unset="true" />
		</sequential>
	</macrodef>

	<macrodef name="set-module-properties">
		<attribute name="module.dir" />

		<sequential>
			<var name="plugin.jars" unset="true" />
			<var name="plugin.required.contexts" unset="true" />
			<var name="plugin.tlds" unset="true" />
			<var name="plugin.version" unset="true" />

			<if>
				<available file="@{module.dir}/docroot/WEB-INF/liferay-plugin-package.properties" />
				<then>
					<var name="plugin-package.module-incremental-version" unset="true" />
					<var name="plugin-package.portal-dependency-jars" unset="true" />
					<var name="plugin-package.portal-dependency-tlds" unset="true" />
					<var name="plugin-package.required-deployment-contexts" unset="true" />

					<property file="@{module.dir}/docroot/WEB-INF/liferay-plugin-package.properties" prefix="plugin-package" />

					<var name="plugin.jars" value="${plugin-package.portal-dependency-jars}" />
					<var name="plugin.required.contexts" value="${plugin-package.required-deployment-contexts}" />
					<var name="plugin.tlds" value="${plugin-package.portal-dependency-tlds}" />
					<var name="plugin.version" value="${plugin-package.module-incremental-version}" />
				</then>
				<else>
					<loadfile property="set-module-properties.build.xml.content" srcFile="@{module.dir}/build.xml" />

					<script classpathref="lib.classpath" language="beanshell">
						String buildXmlContent = project.getProperty("set-module-properties.build.xml.content");

						int x = buildXmlContent.indexOf("property name=\"plugin.version\" value=\"");

						if (x != -1) {
							x = buildXmlContent.indexOf("value=\"", x) + 7;

							int y = buildXmlContent.indexOf("\"", x);

							project.setProperty("plugin.version", buildXmlContent.substring(x, y));
						}
						else {
							project.setProperty("plugin.version", "1");
						}
					</script>

					<var name="set-module-properties.build.xml.content" unset="true" />
					<var name="set-module-properties.plugin.version" unset="true" />
				</else>
			</if>

			<if>
				<equals arg1="@{module.dir}" arg2="." />
				<then>
					<var name="plugin.name" value="${ant.project.name}" />
				</then>
				<else>
					<antelope:grep
						group="2"
						in="@{module.dir}"
						property="plugin.name"
						regex="(.*/)(.*)"
					/>
				</else>
			</if>

			<script classpathref="lib.classpath" language="beanshell">
				String buildXmlContent = project.getProperty("set-module-properties.build.xml.content");

				int x = buildXmlContent.indexOf("property name=\"theme.parent\" value=\"");

				if (x != -1) {
					x = buildXmlContent.indexOf("value=\"", x) + 7;

					int y = buildXmlContent.indexOf("\"", x);

					project.setProperty("theme.parent", buildXmlContent.substring(x, y));
				}
				else {
					project.setProperty("theme.parent", null);
				}
			</script>

			<var name="plugin.packaging" unset="true" />

			<if>
				<or>
					<antelope:endswith string="${plugin.name}" with="-ext" />
					<antelope:endswith string="${plugin.name}" with="-hook" />
					<antelope:endswith string="${plugin.name}" with="-layouttpl" />
					<antelope:endswith string="${plugin.name}" with="-portlet" />
					<antelope:endswith string="${plugin.name}" with="-theme" />
					<antelope:endswith string="${plugin.name}" with="-web" />
				</or>
				<then>
					<property name="plugin.packaging" value="war" />
				</then>
				<else>
					<property name="plugin.packaging" value="jar" />
				</else>
			</if>

			<var name="plugin.full.version.default" value="${lp.version}.${plugin.version}${lp.version.file.suffix}" />

			<var name="plugin.file.default" value="${sdk.dir}/dist/${plugin.name}-${plugin.full.version}.${plugin.packaging}" />
			<var name="plugin.javadoc.file.default" value="${sdk.dir}/dist/${plugin.name}-${plugin.full.version}-javadoc.zip" />
			<var name="plugin.pom.file.default" value="${sdk.dir}/dist/${plugin.name}-${plugin.full.version}.pom" />
			<var name="plugin.sources.file.default" value="${sdk.dir}/dist/${plugin.name}-${plugin.full.version}-sources.${plugin.packaging}" />
			<var name="plugin.src.file.default" value="${sdk.dir}/dist/${plugin.name}-src-${plugin.full.version}.zip" />

			<var name="plugin.full.version" value="${plugin.full.version.default}" />

			<var name="plugin.file" value="${plugin.file.default}" />
			<var name="plugin.javadoc.file" value="${plugin.javadoc.file.default}" />
			<var name="plugin.pom.file" value="${plugin.pom.file.default}" />
			<var name="plugin.sources.file" value="${plugin.sources.file.default}" />
			<var name="plugin.src.file" value="${plugin.src.file.default}" />

			<if>
				<available file="@{module.dir}/src" />
				<then>
					<var name="plugin.classes.dir" value="@{module.dir}/classes" />
					<var name="plugin.lib.dir" value="@{module.dir}/lib" />
					<var name="plugin.source.dir" value="@{module.dir}/src" />

					<if>
						<available file="@{module.dir}/lib" />
						<then>
							<path id="plugin-lib.classpath">
								<fileset dir="@{module.dir}/lib" includes="*.jar" />
								<pathelement location="@{module.dir}/classes" />
							</path>
						</then>
						<else>
							<path id="plugin-lib.classpath">
								<pathelement location="@{module.dir}/classes" />
							</path>
						</else>
					</if>
				</then>
				<else>
					<var name="plugin.classes.dir" value="@{module.dir}/docroot/WEB-INF/classes" />
					<var name="plugin.lib.dir" value="@{module.dir}/docroot/WEB-INF/lib" />
					<var name="plugin.source.dir" value="@{module.dir}/docroot/WEB-INF/src" />

					<if>
						<available file="@{module.dir}/tmp" />
						<then>
							<path id="plugin-lib.classpath">
								<fileset dir="@{module.dir}/docroot/WEB-INF/lib" erroronmissingdir="false" includes="*.jar" />
								<fileset dir="@{module.dir}/tmp/WEB-INF/lib" erroronmissingdir="false" includes="*.jar" />
								<pathelement location="@{module.dir}/docroot/WEB-INF/classes" />
								<pathelement location="@{module.dir}/tmp/WEB-INF/classes" />
							</path>
						</then>
						<else>
							<path id="plugin-lib.classpath">
								<fileset dir="@{module.dir}/docroot/WEB-INF/lib" erroronmissingdir="false" includes="*.jar" />
								<pathelement location="@{module.dir}/docroot/WEB-INF/classes" />
							</path>
						</else>
					</if>
				</else>
			</if>
		</sequential>
	</macrodef>

	<target name="compile-java">
		<copy todir="${javac.destdir}">
			<fileset dir="${javac.srcdir}" excludes="**/*.java" />
		</copy>

		<javac
			classpathref="${javac.classpathref}"
			compiler="${javac.compiler}"
			debug="${javac.debug}"
			deprecation="${javac.deprecation}"
			destdir="${javac.destdir}"
			encoding="${javac.encoding}"
			includeAntRuntime="false"
			nowarn="${javac.nowarn}"
			srcdir="${javac.srcdir}"
		/>
	</target>

	<target name="create">
		<if>
			<or>
				<not>
					<isset property="plugin.type" />
				</not>
			</or>
			<then>
				<fail>This task must be called by the create script.</fail>
			</then>
		</if>

		<if>
			<or>
				<equals arg1="${plugin.type}" arg2="hook" />
				<equals arg1="${plugin.type}" arg2="portlet" />
				<equals arg1="${plugin.type}" arg2="theme" />
			</or>
			<then>
				<subant target="create">
					<fileset dir="${sdk.dir}/${plugin.type}s" includes="build.xml" />
				</subant>
			</then>
			<else>
				<subant target="create">
					<fileset dir="${sdk.dir}/${plugin.type}" includes="build.xml" />
				</subant>
			</else>
		</if>
	</target>

	<target name="format-javadoc">
		<java
			classname="com.liferay.portal.tools.JavadocFormatter"
			classpathref="portal.classpath"
			fork="true"
			newenvironment="true"
		>
			<jvmarg value="-Xmx512m" />
			<arg value="javadoc.init=${init}" />
			<arg value="javadoc.input.dir=${input.dir}" />
			<arg value="javadoc.limit=${limit}" />
			<arg value="javadoc.output.file.prefix=${output.file.prefix}" />
			<arg value="javadoc.update=${update}" />
		</java>
	</target>

	<target name="format-source">
		<java
			classname="com.liferay.portal.tools.sourceformatter.SourceFormatter"
			classpathref="portal.classpath"
			fork="true"
			newenvironment="true"
		>
			<jvmarg value="-Xmx512m" />
			<jvmarg value="-Xss2048k" />
		</java>

		<delete file="ServiceBuilder.temp" />
	</target>

	<target name="print-current-time">
		<tstamp>
			<format property="current.time" pattern="MMMM d, yyyy 'at' hh:mm aa" />
		</tstamp>

		<echo message="${current.time}" />
	</target>

	<target name="setup-eclipse">
		<java
			classname="com.liferay.portal.tools.PluginsEnvironmentBuilder"
			classpathref="portal.classpath"
			fork="true"
			newenvironment="true"
		>
			<jvmarg value="-Dplugins.env.dir=." />
		</java>
	</target>

	<target name="setup-jrebel">
		<property name="jrebel.plugin.classes.dir" value="${basedir}/${plugin.classes.dir}" />

		<echo file="${jrebel.plugin.classes.dir}/rebel.xml"><![CDATA[<?xml version="1.0"?>

<application
	xmlns="http://www.zeroturnaround.com"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.zeroturnaround.com http://www.zeroturnaround.com/alderaan/rebel-2_0.xsd"
>
	<classpath>
		<dir name="${jrebel.plugin.classes.dir}" />
	</classpath>
</application>]]></echo>

		<if>
			<available file="docroot" type="dir" />
			<then>
				<replace file="${jrebel.plugin.classes.dir}/rebel.xml">
					<replacetoken><![CDATA[</application>]]></replacetoken>
					<replacevalue expandProperties="true"><![CDATA[	<web>
		<link target="/${plugin.name}">
			<dir name="${basedir}/docroot" />
		</link>
	</web>
</application>]]></replacevalue>
				</replace>
			</then>
		</if>
	</target>

	<target name="sort-xml-attributes">
		<java
			classname="com.liferay.portal.tools.XMLAttributesSorter"
			classpathref="portal.classpath"
			fork="true"
			newenvironment="true"
		>
			<jvmarg value="-Xmx512m" />
			<jvmarg value="-Xss2048k" />
			<arg value="sort.xml.file.name=${sort.xml.file.name}" />
		</java>
	</target>
</project>